datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum CategoryType {
  SPENDING
  INCOME
  INIT
  TRANSFER
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum Period {
  DAY
  WEEK
  MONTH
  YEAR
}

enum Language {
  UA
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          Role           @default(USER)
  accounts      Account[]
  sessions      Session[]
  wallets       Wallet[]
  categories    Category[]
  transactions  Transaction[]
  exchangeRates ExchangeRate[]
  transfers     Transfer[]

  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Одиничний зв’язок із UserSettings
  userSettings UserSettings?
}

model UserSettings {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeWalletId String @default("all")

  defaultCurrencyId String   @db.ObjectId
  defaultCurrency   Currency @relation(fields: [defaultCurrencyId], references: [id], onDelete: Cascade)

  defaultPeriod   Period   @default(MONTH)
  defaultLanguage Language @default(UA)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Wallet {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  userId             String        @db.ObjectId
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  currencyId         String        @db.ObjectId
  currency           Currency      @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  balance            Int           @default(0)
  debitSum           Int           @default(0)
  creditSum          Int           @default(0)
  transactions       Transaction[]
  initialBalance     Int           @default(0)
  initialBalanceDate DateTime      @default(now())

  transfers1 Transfer[] @relation("FromWallet")
  transfers2 Transfer[] @relation("ToWallet")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Currency {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String @unique
  code   String @unique
  symbol String @unique

  wallets        Wallet[]
  userSettings   UserSettings[]
  exchangeRates  ExchangeRate[] @relation("FirstCurrency")
  exchangeRates2 ExchangeRate[] @relation("SecondCurrency")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  categoryType CategoryType

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  title           String          @default("")
  amount          Int             @default(0)
  transactionType TransactionType
  date            DateTime        @default(now())

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  walletId String @db.ObjectId
  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  transaction1  Transfer[] @relation("FromTransactionId")
  transaction2  Transfer[] @relation("ToTransactionId")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExchangeRate {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  date DateTime @default(now())

  firstCurrencyId String   @db.ObjectId
  currency1       Currency @relation("FirstCurrency", fields: [firstCurrencyId], references: [id], onDelete: Cascade)

  rate Float

  secondCurrencyId String   @db.ObjectId
  currency2        Currency @relation("SecondCurrency", fields: [secondCurrencyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transfer {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  fromWalletId String @db.ObjectId
  wallet1      Wallet @relation("FromWallet", fields: [fromWalletId], references: [id], onDelete: Cascade)

  amount Float
  changed Float

  toWalletId String @db.ObjectId
  wallet2    Wallet @relation("ToWallet", fields: [toWalletId], references: [id], onDelete: Cascade)

  fromTransactionId String @db.ObjectId
  transaction1      Transaction @relation("FromTransactionId", fields: [fromTransactionId], references: [id], onDelete: Cascade)

  toTransactionId String @db.ObjectId
  transaction2    Transaction @relation("ToTransactionId", fields: [toTransactionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
